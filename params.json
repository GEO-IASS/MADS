{"name":"MADS","tagline":"Model Analyses & Decision Support (MADS)","body":"MADS is an open-source code designed as an integrated high-performance computational framework performing a wide range of model-based analyses:\r\n* Sensitivity Analysis\r\n* Parameter Estimation\r\n* Model Inversion and Calibration\r\n* Uncertainty Quantification\r\n* Model Selection and Averaging\r\n* Decision Support\r\n\r\nMADS utilizes adaptive rules and techniques which allows the analyses to be performed with minimum user input.\r\nThe code provides a series of alternative algorithms to perform each type of model analyses.\r\nThe code allows for coupled model parameters and regularization terms that are internally computed based on user-defined mathematical expressions.\r\n\r\nFor more information check out he MADS website at http://mads.lanl.gov\r\n\r\nLicensing: GPLv3: http://www.gnu.org/licenses/gpl-3.0.html\r\n\r\nDownload:  \r\n* http://gitlab.com/monty/mads  \r\n* http://github.com/montyvesselinov/MADS  \r\n* http://bitbucket.org/monty_vesselinov/mads  \r\n\r\nClone GIT repositories:  \r\n* git clone git@gitlab.com:monty/mads.git  \r\n* git clone git@github.com:montyvesselinov/MADS.git  \r\n* git clone git@bitbucket.org:monty_vesselinov/mads.git  \r\n\r\nRequired third party libraries (TPL's):  \r\n* GSL: http://www.gnu.org/s/gsl  \r\n* LAPACK: http://www.netlib.org/lapack  \r\n* BLAS: http://www.netlib.org/blas  \r\n* MATHEVAL: http://www.gnu.org/software/libmatheval  \r\n* YAML: http://pyyaml.org/wiki/LibYAML; http://www.yaml.org  \r\n* GLIB: http://developer.gnome.org/glib  \r\n  \r\nThe required TPL's can be downloaded at http://gitlab.com/mads/mads-tpls  \r\n  \r\nThe code has been tested on Apple MAC OS X, Linux (RHEL / CentOS / Fedora / Ubuntu / Debian) and Cygwin/Microsoft Windows.  \r\n  \r\nCheckout the 'readme' file for installation instructions.  \r\n  \r\nCompilation:  \r\n* `make` OR\r\n* `cmake -f CMakeLists.txt` (cmake version 3.1 is required)\r\n  \r\nVerification:  \r\n* `make verify` (all test problems listed below)  \r\n* `make verify-internal` (internal test functions)  \r\n* `make verify-forward` (forward contaminant transport simulations)  \r\n* `make verify-contaminant` (inverse contaminant transport analyses)  \r\n* `make verify-multistart1` verify-multistart2 (multi-start inverse problems using random initial parameter guesses)  \r\n* `make verify-external` verify-external-short (inverse problems using the code WELLS; http://wells.lanl.gov)  \r\n* `make verify-parallel` (parallel inverse analysis)  \r\n* `make verify-sa` (global sensitivity analysis)  \r\n  \r\nExamples:  \r\n* `make examples`  \r\n* additional examples can be found in directory 'example' (check the 'readme' files in the directory 'example')  \r\n* see also http://mads.lanl.gov/#examples and http://mads.lanl.gov/#demos  \r\n  \r\nComparisons:\r\n* test probelems are available\r\n* comparisons with the code PEST are available as well (in subdirectories of 'example', check the 'readme' files)  \r\n* see also http://mads.lanl.gov/#comparisons  \r\n  \r\nManual: http://mads.lanl.gov/#manual  \r\n  \r\nUSAGE:\r\n*      `mads problem_name    [ keywords | options ]`  OR\r\n*      `mads MADS_input_file [ keywords | options ]`  OR\r\n*      `mads PEST_input_file [ keywords | options ]`  (MADS is compatible with PEST control, template and instruction files)\r\n\r\nwhere:\r\n* `problem_name`:         name of the solved problem; `MADS_input_file` named `problem_name.mads` is expected\r\n* `MADS_input_file`:      problem input file in MADS format (typically `*.mads`)\r\n* `PEST_input_file`:      problem input file in PEST format (PEST control file; `*.pst`)\r\n\r\nkeywords & options (can be provided in any order):\r\n\r\nproblem type keywords:\r\n*  check              - check model setup and input/output files (no model execution)\r\n*  create             - create calibration problem based on provided model parameters (single model execution to compute calibration targets)\r\n*  forward            - forward model run (no calibration); recommended for model setup checking\r\n*  calibrate          - calibration run [default if no problem type keyword is provided]\r\n*  montecarlo         - Monte-Carlo analysis\r\n*  gsens              - global sensitivity analysis\r\n*  glue               - Generalized Likelihood Uncertainty Estimation\r\n*  lsens              - local sensitivity analysis (standalone or at the end of the calibration)\r\n*  eigen              - local eigensystem analysis (standalone or at the end of the calibration)\r\n*  abagus             - Agent-Based Global Uncertainty & Sensitivity Analysis\r\n*  infogap            - Info-gap decision analysis\r\n*  postpua            - predictive uncertainty analysis of sampling results (currently for abagus PSSA files only)\r\n\r\ncalibration method keywords (select one):\r\n*  single             - single calibration using initial guesses provided in the input file [default]\r\n*  igrnd              - sequential calibrations using a set of random initial values (number of realizations defined by real=X)\r\n*  igpd               - sequential calibrations using a set of discretized initial values (discretization defined in the input file)\r\n*  ppsd               - sequential calibrations using partial parameter space discretization (PPSD) method (discretization defined in the input file)\r\n\r\ncalibration termination criteria:\r\n*  eval=[integer]     - functional evaluations exceed the predefined value [default eval=5000]\r\n*  cutoff=[real]      - objective function is below the cutoff value [default cutoff=0]\r\n*  obsrange           - model predictions are within predefined calibration ranges\r\n*  obserror=[real]    - model predictions are within a predefined absolute error [default obserror=0.1]\r\n*  parerror=[real]    - model parameters are within a predefined absolute error from their known 'true' values [default parerror=0.1]\r\n\r\nuser-enforced termination:\r\n*  problem_name.quit  - if file with this name exists in the running directory, MADS terminates as soon as possible.\r\n*  problem_name.stop  - if file with this name exists in the running directory, MADS terminates after saving intermediate results.\r\n\r\noptimization method (opt=[string]; various combinations are possible, e.g. pso_std_lm_gsl):\r\n*  opt=lm             - Local Levenberg-Marquardt optimization [default]\r\n*  opt=lm_levmar      - Local Levenberg-Marquardt optimization using LEVMAR library\r\n*  opt=lm_gsl         - Local Levenberg-Marquardt optimization using GSL library\r\n*  opt=lm_ms          - Local Multi-Start (Multi-Try) Levenberg-Marquardt (MSLM) optimization using multiple random initial guesses\r\n*  opt=pso            - Global Particle Swarm optimization (default Standard2006; http://clerc.maurice.free.fr/pso)\r\n*  opt=apso           - Global Adaptive Particle Swarm optimization (default TRIBES)\r\n*  opt=swarm          - Global Particle Swarm optimization Standard2006 (also opt=pso_std)\r\n*  opt=tribes         - Global Particle Swarm optimization TRIBES-D (Clerc 2004; http://clerc.maurice.free.fr/pso)\r\n*  opt=squads         - SQUADS: Adaptive hybrid optimization using coupled local and global optimization techniques\r\n\r\ngeneral calibration/optimization options:\r\n*  retry=[integer]    - number of optimization retries [default retry=0]\r\n*  particles=[integer]- number of initial particles or tribes [default `particles=10+2*sqrt(Number_of_parameters)`]\r\n*  lmeigen|eigen      - eigen analysis of the intermediate / final optimized solution\r\n\r\nLevenberg-Marquardt optimization options:\r\n*  lmfactor=[double]  - multiplier applied to compute when to initiate LM searches within SQUADS algorithm [default lmfactor=1.0]\r\n*  lmindirect         - Indirect computation of LM alpha coefficient [default DIRECT/Delayed gratification computation]\r\n*  lmmu=[double]      - LM alpha multiplier for direct computation of LM alpha coefficient when OF decreases [default lmmu=0.1]\r\n*  lmnu=[integer]     - LM alpha multiplier for direct computation of LM alpha coefficient when OF increases [default lmnu=10]\r\n*  lmaccel            - LM geodesic acceleration as proposed by Transtrum et al (2011) [default NO acceleration]\r\n*  lmratio=[double]   - LM acceleration velocity ratio for recomputing the Jacobian [default lmratio=(3/4)^2]\r\n*  lmh=[double]       - LM acceleration multiplier [default lmh=0.1]\r\n*  lmiter=[integer]   - number of LM iterations [default computed internally based on number of evaluations]\r\n*  lmnlam=[integer]   - Maximum number of linear solves (lambda searches) after each Jacobian estimate [default lmnlam=10]\r\n*  lmnlamof=[integer] - Number of acceptable linear solves (lambda searches) with similar OF's during LM optimization [default lmnlamof=3]\r\n*  lmnjacof=[integer] - Number of acceptable jacobian iterations with similar OF's during LM optimization [default lmnjacof=5]\r\n*  lmerror=[double]   - LM convergence error [default lmerror=1e-5]\r\n\r\nsampling method (smp=[string] OR mslm=[string] for Multi-Start Levenberg-Marquardt (MSLM) analysis using multiple retries):\r\n*  smp=olhs           - Optimal Latin Hyper Cube sampling [default] (if real=1 RANDOM; if real>1 IDLHS; if real>500 LHS)\r\n*  smp=lhs            - Latin Hyper Cube sampling (LHS)\r\n*  smp=idlhs          - Improved Distributed Latin Hyper Cube sampling (IDLHS)\r\n*  smp=random         - Random sampling\r\n\r\nsampling options:\r\n*  real=[integer]     - number of random realizations / samples [default real=100]\r\n*  case=[integer]     - execute a single case from all the realizations / samples (applied in PPSD, IGDP, IGRND, MONTECARLO)\r\n*  seed=[integer]     - random seed value [randomly generated by default]\r\n\r\nobjective function functional form options (select one; regularizaiton terms can be added separately):\r\n*  ssr                - sum of the squared residuals [default]\r\n*  ssd0               - sum of the squared discrepancies\r\n*  ssdx               - sum of the squared discrepancies increased to get in the bounds\r\n*  ssda               - sum of the squared discrepancies and absolute residuals\r\n*  ssdr               - sum of the squared discrepancies and squared residuals\r\n\r\ntransformation of parameter and observation properties:\r\n*  nosin              - Sin transformation of optimized parameters is not applied [parameters are sin transformed by default]\r\n*  sindx              - Parameter space step for numerical derivatives of sin transformed parameters\r\n*                       [default sindx=1e-7 for internal problems; sindx=0.1 for external problems]\r\n*  lindx              - Parameter space step for numerical derivatives of not transformed parameters [default lindx=0.001]\r\n*  pardx              - Parameter space step for parameter space discretization [default pardx=0.1]\r\n*  plog=[-1,0,1]      - Log transformation of all optimized parameters is enforced (1) or disabled (0)\r\n*                       [default plog=-1; log transformation is explicitly defined for each parameter in the input file]\r\n*  olog=[-1,0,1]      - Log transformation of all the observations (simulated and measured) is enforced (1) or disabled (0)\r\n*                       [default olog=-1; log transformation is explicitly defined for each observation in the input file]\r\n*  oweight=[-1,0,1,2] - Weights for all the observation residuals are defined:\r\n*                       0 = zero weight, 1 = unit weight, 2 = weight reversely proportional to observation\r\n*                       [default oweight=-1; weights for each observation are explicitly defined in the input file]\r\n*  obsdomain=[float]  - observation space domain size [default provided in the MADS input file]\r\n*  obsstep=[float]    - observation space domain step to explore info-gap observation uncertainty [default ignored]\r\n\r\nparallelization (parallelization environment and available resources are internally detected by default; supported - SLURM, OpenMP, Moab, ...):\r\n*  posix              - POSIX parallel threading [default]\r\n*  omp                - OpenMP parallel threading [optional]\r\n*  np=[integer]       - Number of requested parallel jobs [optional]\r\n*  nplambda=[integer] - Number of requested parallel lambda runs in the case of Levenberg-Marquardt optimization [optional; nplambda <= np]\r\n*  rstfile=[string]   - name of existing ZIP restart file to be used (created by previous Parallel MADS run) [optional]\r\n*  rstdir=[string]    - name of existing restart directory to be used (created by previous Parallel MADS run) [optional]\r\n*  restart=[integer]  - restart=1 (default; automatic restart if possible); restart=0 (force no restart); restart=-1 (force restart)\r\n*                       by default the analyses will be restarted automatically (restart=1)\r\n\r\nABAGUS (Agent-Based Global Uncertainty & Sensitivity Analysis) options:\r\n*  infile=[string]    - name of previous results file to be used to initialize Kd-tree [default=NULL]\r\n*  energy=[integer]   - initial energy for particles [default energy=10000]\r\n\r\noptions for the build-in analytical solutions:\r\n*  point              - point contaminant source in 3D flow domain\r\n*  plane              - plane contaminant source in 3D flow domain\r\n*  box                - brick contaminant source in 3D flow domain\r\n*  obs_int=[1,2]      - concentration integration along observation well screens (1 - mid point; 2 - two end points [default=1]\r\n*  disp_tied          - lateral and vertical transverse dispersivities are fractions of the longitudinal dispersivity\r\n*  disp_scaled        - longitudinal dispersivity is scaled with the travel distance\r\n*                       if disp_scaled and disp_tied are applied, longitudinal dispersivity is scaled and\r\n*                       lateral and vertical transverse dispersivities are fractions of the scaled longitudinal dispersivity\r\n*  disp_scaled=2      - longitudinal, lateral and vertical transverse dispersivities are scaled with the travel distance\r\n*  time_step          - parameter \"end time\" is representing the period (dt) within which the source is active\r\n\r\nbuild-in test problems for optimization / uncertainty-quantification techniques (local and global methods):\r\n*  test=[integer]     - test problem ID [default=1]:\r\n\t*                          1: Parabola (Sphere)\r\n\t*                          2: Griewank\r\n\t*                          3: Rosenbrock\r\n\t*                          4: De Jong's Function #4\r\n\t*                          5: Step\r\n\t*                          6: Alpine function (Clerc's Function #1)\r\n\t*                          7: Rastrigin\r\n\t*                          8: Krishna Kumar\r\n\t*                          9: Tripod function 2D\r\n\t*                         10: Shekel's Foxholes 2D\r\n\t*                         11: Shekel's Foxholes 5D\r\n\t*                         12: Shekel's Foxholes 10D\r\n\t*                         20: Shekel's Foxholes 2D (alternative; global methods only)\r\n\t*                         21: Polynomial fitting (global methods only)\r\n\t*                         22: Ackley (global methods only)\r\n\t*                         23: Eason 2D (global methods only)\r\n\t*                         31: Rosenbrock (2D simplified alternative)\r\n\t*                         32: Griewank (alternative)\r\n\t*                         33: Rosenbrock (alternative with d*(d-1) observations\r\n\t*                         34: Powell's Quadratic\r\n\t*                         35: Booth\r\n\t*                         36: Beale\r\n\t*                         37: Parsopoulos\r\n\t*                         Curve-fitting test functions:\r\n\t*                         40: Sin/Cos test function (2 parameters)\r\n\t*                         41: Sin/Cos test function (4 parameters)\r\n\t*                         42: Sin/Cos test function (2 parameters; simplified)\r\n\t*                         43: Exponential Data Fitting I (5 parameters)\r\n\t*                         44: Exponential Data Fitting II (11 parameters)\r\n*  dim=[integer]      - dimensionality of parameter space for the test problem (fixed for some of the problems) [default=2]\r\n*  npar=[integer]     - number of model parameters for the test problem (fixed for some of the problems) [default=2]\r\n*  nobs=[integer]     - number of observations for the test problem (fixed for some of the problems) [default=2]\r\n*  pardomain=[float]  - parameter space domain size [default pardomain=100]\r\n\r\ndebugging / verbose levels:\r\n*  force | f          - enforce running even if a file *.running exists (the file *.running is to prevent overlapping executions)\r\n*  quiet | q          - no screen output (all the screen output is saved in a file with extension mads_output\r\n*  debug=[0-5]        - general debugging [default debug=0]\r\n*  fdebug=[0-5]       - model evaluation debugging [default fdebug=0]\r\n*  ldebug=[0-3]       - Levenberg-Marquardt optimization debugging [default ldebug=0]\r\n*  pdebug=[0-3]       - Particle Swarm optimization debugging [default pdebug=0]\r\n*  mdebug=[0-3]       - Random sampling debugging [default mdebug=0]\r\n*  odebug=[0-1]       - Record objective function progress in a file with extension 'ofe' [default odebug=0]\r\n*  tdebug=[0-1]       - Output process times for various tasks [default tdebug=0]\r\n*  tpldebug=[0-3]     - Debug the writing of external files [default tpldebug=0]\r\n*  insdebug=[0-3]     - Debug the reading of external files [default insdebug=0]\r\n*  pardebug=[0-3]     - Debug the parallel execution [default pardebug=0]\r\n\r\npre-/post-processing:\r\n*  yaml               - Reads/writes/converts MADS files in YAML format\r\n*  xml                - Reads/writes/converts MADS files in XML format\r\n*  resultsfile=[file] - Post process results saved in a previously generated resultsfile (e.g. using 'igrnd' analysis)\r\n*  resultscase=[int]  - Post process specific case saved in resultsfile (if resultscase<0, first abs(resultscase) cases)\r\n*  cutoff=[real]      - Post process all cases saved in resultsfile with objective function below the cutoff value\r\n*  obsrange           - Post process all cases saved in resultsfile with model predictions within predefined calibration ranges\r\n*  pargen             - Generate MADS input files for independent multi-processor runs [default pargen=0]\r\n*  save               - Save MADS input/output files for successful parameter sets [default save=0]\r\n\r\nExamples:\r\n*  mads a01 test=2 opt=lm eigen igrnd real=1 (no input files are needed for execution)\r\n*  mads a01 test=2 opt=squads igrnd real=1\r\n*  mads a01 test=2 abagus cutoff=0.1 eval=100000 (collect solutions of Griewank function below phi cutoff)\r\n*  mads a01 test=3 abagus cutoff=20 eval=100000  (collect solutions of Rosenbrock function below phi cutoff)\r\n*  mads examples/contamination/s01 ldebug lmeigen (file s01.mads is located in examples/contamination)\r\n*  mads examples/contamination/s01 ldebug lmeigen igrnd real=1\r\n*  mads examples/contamination/s01 seed=1549170842 obsrange igrnd real=1\r\n*  mads examples/contamination/s01 opt=squads seed=1549170842 eigen obsrange pdebug igrnd real=1\r\n*  mads examples/contamination/s01 opt=pso seed=1549170842 eigen obsrange igrnd real=1\r\n*  mads examples/contamination/s01-flagged ppsd (Partial Parameter Space Discretization)\r\n*  mads examples/contamination/s01-flagged igpd (Initial Guesses based on Discreetly distributed model parameters)\r\n*  mads examples/contamination/s01 igrnd real=10 (Random Initial Guesses; all parameters)\r\n*  mads examples/contamination/s01-flagged igrnd real=10 (Random Initial Guesses; only flagged parameters)\r\n*  mads examples/contamination/s01 monte real=10 (Monte Carlo Analysis)\r\n*  cd examples/wells; mads w01.mads igrnd real=1 seed=501228648 eigen\r\n\r\nParallel Levenberg-Marquardt optimization:\r\n*  cd examples/wells-short\r\n*  mads w01parallel.mads restart=0 np=2 ldebug pardebug=2 (Parallel optimization using 2 processors)\r\n*  mads w01parallel.mads restart=0 np=11 nplambda=11\r\n*  mads w01parallel.mads restart=0 np=3 nplambda=3 lmnlam=21 lmnlamof=12 (if a small number of processors is used, lmnlam & lmnlamof should be increased)\r\n\r\nComparisons between local and global methods:\r\n*  mads a01 test=3 opt=lm     igrnd real=1000 cutoff=1e-3 (Levenberg-Marquardt optimization)\r\n*  mads a01 test=3 opt=lm_ms  igrnd real=1000 cutoff=1e-3 (Multi-Start Levenberg-Marquardt optimization)\r\n*  mads a01 test=3 opt=swarm  igrnd real=1000 cutoff=1e-3 (Particle Swarm optimization Standard2006)\r\n*  mads a01 test=3 opt=tribes igrnd real=1000 cutoff=1e-3 (Particle Swarm optimization TRIBES-D)\r\n*  mads a01 test=3 opt=squads igrnd real=1000 cutoff=1e-3 (Adaptive hybrid optimization Squads)\r\n\r\nComparisons with PEST (http://www.sspa.com/pest/):\r\n*  cd examples/contamination\r\n*  mads s02 lmeigen                  (file s02.mads is located in examples/contamination)\r\n*  pest s02pest                   (file s02pest.pst is located in examples/contamination)\r\n*  mads w01 lmeigen     (files associated with problem w01 are located in examples/wells)\r\n*  pest w01pest     (files associated with problem w01pest are located in examples/wells)\r\n*  pest w02pest     (files associated with problem w02pest are located in examples/wells)\r\n\r\nFor additional information:\r\n*  web:   http://mads.lanl.gov -:- http://www.ees.lanl.gov/staff/monty/codes/mads\r\n*  repo:  http://gitlab.com/monty/mads\r\n*  git:   git clone git@gitlab.com:monty/mads.git\r\n*  email: Velimir V Vesselinov (monty) vvv@lanl.gov -:- velimir.vesselinov@gmail.com\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}